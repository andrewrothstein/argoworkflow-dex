---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: dex
  name: dex
  namespace: {{ .Release.Namespace }}
   
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: dex
rules:
- apiGroups: ["dex.coreos.com"] # API group created by dex
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["create"] # To manage its own resources, dex must be able to create customresourcedefinitions
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: dex
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: dex
subjects:
- kind: ServiceAccount
  name: dex           # Service account assigned to the dex pod, created above
  namespace: {{ .Release.Namespace }}   # The namespace dex is running in
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: dex
  name: dex
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: dex
  template:
    metadata:
      labels:
        app: dex
    spec:
      serviceAccountName: dex # This is created below
      containers:
      - image: "{{ .Values.dex.image.registry }}/{{ .Values.dex.image.repository }}:{{ .Values.dex.image.tag | default .Chart.AppVersion }}"
        name: dex
        command: ["/usr/local/bin/dex", "serve", "/etc/dex/cfg/config.yaml"]
        ports:
        - name: https
          containerPort: 5556
        volumeMounts:
        - name: config
          mountPath: /etc/dex/cfg 
        - name: dex-ssl
          mountPath: /etc/dex/ssl
          readOnly: true
        env:
        - name: CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: argo-workflows-sso
              key: client-secret
        # readinessProbe:
        #   httpGet:
        #     path: /healthz
        #     port: 5558
        #     scheme: HTTPS
      volumes:
      - name: dex-ssl
        secret:
          secretName: tls-secret
      - name: config
        secret:
          secretName: dex
---
apiVersion: v1
kind: Service
metadata:
  name: dex
  namespace: {{ .Release.Namespace }}
spec:
  type: {{ .Values.dex.serviceType }}
  {{- if and (eq .Values.dex.serviceType "LoadBalancer") .Values.dex.loadBalancerIP }}
  loadBalancerIP: {{ .Values.dex.loadBalancerIP | quote }}
  {{- end }}
  ports:
  - name: dex
    port: 5556
    protocol: TCP
    targetPort: 5556
  selector:
    app: dex
